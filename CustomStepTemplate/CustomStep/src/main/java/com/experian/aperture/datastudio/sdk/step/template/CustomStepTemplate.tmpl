package com.experian.aperture.datastudio.sdk.step.template;

import com.experian.datastudio.sdk.api.CustomTypeMetadata;
import com.experian.datastudio.sdk.api.CustomTypeMetadataBuilder;
import com.experian.datastudio.sdk.api.step.Column;
import com.experian.datastudio.sdk.api.step.CustomStepDefinition;
import com.experian.datastudio.sdk.api.step.configuration.StepConfiguration;
import com.experian.datastudio.sdk.api.step.configuration.StepConfigurationBuilder;
import com.experian.datastudio.sdk.api.step.configuration.StepIcon;
import com.experian.datastudio.sdk.api.step.processor.*;

import java.util.ArrayList;
import java.util.List;

/**
 * This is an empty custom step template.
 * It can be compiled and imported into Aperture Data Studio as it is but does not process the columns.
 * It selects an input column and passes it through as an output column.
 */
public class {{.CustomStepTemplate}} implements CustomStepDefinition {

private static final String INPUT_ID = "input-1";
private static final String OUTPUT_ID = "output-1";
private static final String ARG_ID_COLUMN_CHOOSER = "ColumnChooser";

@Override
public CustomTypeMetadata createMetadata(final CustomTypeMetadataBuilder metadataBuilder) {
        return metadataBuilder
        .withName("Custom: {{.CustomStepTemplate}}")
        .withDescription("Description of what the custom step does")
        .withMajorVersion(0)
        .withMinorVersion(0)
        .withPatchVersion(0)
        .withDeveloper("Your Name")
        .withLicense("Apache License Version 2.0")
        .build();
        }

@Override
public StepConfiguration createConfiguration(final StepConfigurationBuilder configurationBuilder) {
        return configurationBuilder
        .withNodes(stepNodeBuilder -> stepNodeBuilder
        .addInputNode(inputNodeBuilder -> inputNodeBuilder
        .withId(INPUT_ID)
        .withIsRequired(true)
        .withLabelDisplayed(false)
        .build())
        .addOutputNode(OUTPUT_ID)
        .build())
        .withStepProperties(stepPropertiesBuilder -> stepPropertiesBuilder
        .addStepProperty(stepPropertyBuilder -> stepPropertyBuilder
        .asColumnChooser(ARG_ID_COLUMN_CHOOSER)
        .forInputNode(INPUT_ID)
        .withLabelSupplier(context -> "Select a column")
        .withIsRequired(true)
        .build())
        .build())
        .withOutputLayouts(outputLayoutBuilder -> outputLayoutBuilder
        .forOutputNode(OUTPUT_ID, outputColumnBuilder -> outputColumnBuilder
        .addColumns(context -> {
final List<Column> columns = new ArrayList<>();
final List<Column> columnChooserValues = context.getColumnFromChooserValues(ARG_ID_COLUMN_CHOOSER);
        if (!columnChooserValues.isEmpty()) {
final Column selectedColumn = columnChooserValues.get(0);
final Column newColumn = context.createNewColumn(selectedColumn.getName());
        columns.add(newColumn);
        }
        return columns;
        })
        .build())
        .build())
        .withIcon(StepIcon.CAMERA)
        .build();
        }

@Override
public StepProcessor createProcessor(final StepProcessorBuilder processorBuilder) {
        return processorBuilder
        .forOutputNode(OUTPUT_ID, (processorContext, outputColumnManager) -> {
final List<InputColumn> columnChooserValues = processorContext.getColumnFromChooserValues(ARG_ID_COLUMN_CHOOSER);
        if (!columnChooserValues.isEmpty()) {
final InputColumn column = columnChooserValues.get(0);
        outputColumnManager.onValue(column.getName(), rowIndex -> {
final CellValue cellValue = column.getValueAt(rowIndex);
        // TODO: Process your cell value here
        return cellValue.toObject();
        });
        }

final ProcessorInputContext inputContext = processorContext.getInputContext(INPUT_ID).orElseThrow(IllegalArgumentException::new);
        return inputContext.getRowCount();
        })
        .build();
        }
        }
